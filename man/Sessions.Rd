% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Sessions.R
\name{Sessions}
\alias{Sessions}
\title{Sessions}
\description{
Sessions

Sessions
}
\details{
R6 class to track the polished sessions

This function sets "is_active" to `FALSE` for the session uid in the
polished.sessions table.  We execute this function when the user disconnects
from the custom Shiny app that is using polished.


this function sets "is_active" to TRUE in the "polished.sessions"
table.  This occurs when a user returns to the Shiny app and they are still
signed in from a previous session.



if this project has more than 1 polished app and/or the user is signed into
app(s) in thie polished project from more than 1 device, the user can have more
than 1 active session.  This function signs the user out of all active sessions.



Verify the firebase token using the methodology outlined here
\url{https://firebase.google.com/docs/auth/admin/verify-id-tokens}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-config}{\code{Sessions$config()}}
\item \href{#method-curr_time_1}{\code{Sessions$curr_time_1()}}
\item \href{#method-sign_in}{\code{Sessions$sign_in()}}
\item \href{#method-get_invite_by_email}{\code{Sessions$get_invite_by_email()}}
\item \href{#method-get_invite_by_uid}{\code{Sessions$get_invite_by_uid()}}
\item \href{#method-get_roles}{\code{Sessions$get_roles()}}
\item \href{#method-find}{\code{Sessions$find()}}
\item \href{#method-list}{\code{Sessions$list()}}
\item \href{#method-refresh_email_verification}{\code{Sessions$refresh_email_verification()}}
\item \href{#method-set_signed_in_as}{\code{Sessions$set_signed_in_as()}}
\item \href{#method-clear_signed_in_as}{\code{Sessions$clear_signed_in_as()}}
\item \href{#method-get_signed_in_as_user}{\code{Sessions$get_signed_in_as_user()}}
\item \href{#method-set_inactive}{\code{Sessions$set_inactive()}}
\item \href{#method-set_active}{\code{Sessions$set_active()}}
\item \href{#method-sign_out}{\code{Sessions$sign_out()}}
\item \href{#method-clone}{\code{Sessions$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-config"></a>}}
\subsection{Method \code{config()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$config(
  app_name,
  firebase_project_id = NULL,
  conn = NULL,
  authorization_level = "app"
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-curr_time_1"></a>}}
\subsection{Method \code{curr_time_1()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$curr_time_1()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sign_in"></a>}}
\subsection{Method \code{sign_in()}}{
returns either the signed in user if the sign in is successfull or NULL
if the sign in fails.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$sign_in(firebase_token, hashed_cookie)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{firebase_token}}{the id token JWT created by the Firebase client side
JavaScript.}

\item{\code{hashed_cookie}}{the hashed polished cookie}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list containing the collofing if sign in is successful:
- is_admin
- $is_admin
- user_uid
- roles

roles_out the sign in is successful this function also executed `private$add(<user session>)`
which inserts the newly activated session into the "polished.sessions" table.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_invite_by_email"></a>}}
\subsection{Method \code{get_invite_by_email()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$get_invite_by_email(email)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_invite_by_uid"></a>}}
\subsection{Method \code{get_invite_by_uid()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$get_invite_by_uid(user_uid)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_roles"></a>}}
\subsection{Method \code{get_roles()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$get_roles(user_uid)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-find"></a>}}
\subsection{Method \code{find()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$find(hashed_cookie)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-list"></a>}}
\subsection{Method \code{list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-refresh_email_verification"></a>}}
\subsection{Method \code{refresh_email_verification()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$refresh_email_verification(session_uid, firebase_token)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_signed_in_as"></a>}}
\subsection{Method \code{set_signed_in_as()}}{
sign in as an alternate user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$set_signed_in_as(session_uid, signed_in_as_user_uid)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session_uid}}{the session uid}

\item{\code{signed_in_as_user_uid}}{the user uid of the user to that the admin is
signing in as.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear_signed_in_as"></a>}}
\subsection{Method \code{clear_signed_in_as()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$clear_signed_in_as(session_uid)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_signed_in_as_user"></a>}}
\subsection{Method \code{get_signed_in_as_user()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$get_signed_in_as_user(user_uid)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_inactive"></a>}}
\subsection{Method \code{set_inactive()}}{
set the user session to active
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$set_inactive(session_uid)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session_uid}}{the session uid}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_active"></a>}}
\subsection{Method \code{set_active()}}{
set the user session to active
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$set_active(session_uid)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session_uid}}{the session uid}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sign_out"></a>}}
\subsection{Method \code{sign_out()}}{
sign the user out of all sessions in the polished project
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$sign_out(user_uid)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user_uid}}{the uid of the user}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Sessions$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
